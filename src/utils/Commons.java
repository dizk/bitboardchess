package utils;

public class Commons {
	
	// The files we have
	
    public static class File {
        public static final int A = 0;
        public static final int B = 1;
        public static final int C = 2;
        public static final int D = 3;
        public static final int E = 4;
        public static final int F = 5;
        public static final int G = 6;
        public static final int H = 7;
    }
    
    // The different kind of pieces we have
    
    public static class PieceType {
        public static final int KING   = 0;
        public static final int QUEEN  = 1;
        public static final int ROOK   = 2;
        public static final int BISHOP = 3;
        public static final int KNIGHT = 4;
        public static final int PAWN   = 5;
    }
    
    // Inital positions in bitmap format
    public static class Bitmaps {
        

        public static final long[] WHITE_PIECES = {
                0x1000000000000000L, /* KING   */
                0x0800000000000000L, /* QUEEN  */
                0x8100000000000000L, /* ROOK   */
                0x2400000000000000L, /* BISHOP */
                0x4200000000000000L, /* KNIGHT */
                0x00FF000000000000L, /* PAWN   */
        };
        

        public static final long[] BLACK_PIECES = {
                0x0000000000000010L, /* KING   */
                0x0000000000000008L, /* QUEEN  */
                0x0000000000000081L, /* ROOK   */
                0x0000000000000024L, /* BISHOP */
                0x0000000000000042L, /* KNIGHT */
                0x000000000000FF00L, /* PAWN   */
        };
        
        // Ranks in bitmap
        public static final long[] RANKS = {
                0xFF00000000000000L, /* 1 */
                0x00FF000000000000L, /* 2 */
                0x0000FF0000000000L, /* 3 */
                0x000000FF00000000L, /* 4 */
                0x00000000FF000000L, /* 5 */
                0x0000000000FF0000L, /* 6 */
                0x000000000000FF00L, /* 7 */
                0x00000000000000FFL, /* 8 */
        };
        
        // Files as bitmap
        public static final long[] FILES = {
                0x0101010101010101L, /* A */
                0x0202020202020202L, /* B */
                0x0404040404040404L, /* C */
                0x0808080808080808L, /* D */
                0x1010101010101010L, /* E */
                0x2020202020202020L, /* F */
                0x4040404040404040L, /* G */
                0x8080808080808080L, /* H */
        };
    }
	
	
	// The two colors we have.
	public static class Color {
		public static final int BLACK = 0;
		public static final int WHITE = 1;
	}
	
	/**
	 * Pre-calculated rook attacks for each position on the entire board.
	 */
	public static final long[] ROOK_ATTACKS = {
		0x01010101010101FEL,
		0x02020202020202FDL,
		0x04040404040404FBL,
		0x08080808080808F7L,
		0x10101010101010EFL,
		0x20202020202020DFL, // 5
		0x40404040404040BFL,
		0x808080808080807FL,
		0x010101010101FE01L,
		0x020202020202FD02L,
		0x040404040404FB04L, // 10
		0x080808080808F708L,
		0x101010101010EF10L,
		0x202020202020DF20L,
		0x404040404040BF40L,
		0x8080808080807F80L, // 15
		0x0101010101FE0101L,
		0x0202020202FD0202L,
		0x0404040404FB0404L,
		0x0808080808F70808L,
		0x1010101010EF1010L, // 20
		0x2020202020DF2020L,
		0x4040404040BF4040L,
		0x80808080807F8080L,
		0x01010101FE010101L,
		0x02020202FD020202L, // 25
		0x04040404FB040404L,
		0x08080808F7080808L,
		0x10101010EF101010L,
		0x20202020DF202020L,
		0x40404040BF404040L, // 30
		0x808080807F808080L,
		0x010101FE01010101L,
		0x020202FD02020202L,
		0x040404FB04040404L,
		0x080808F708080808L, // 35
		0x101010EF10101010L,
		0x202020DF20202020L,
		0x404040BF40404040L,
		0x8080807F80808080L,
		0x0101FE0101010101L, // 40
		0x0202FD0202020202L,
		0x0404FB0404040404L,
		0x0808F70808080808L,
		0x1010EF1010101010L,
		0x2020DF2020202020L, // 45
		0x4040BF4040404040L,
		0x80807F8080808080L,
		0x01FE010101010101L,
		0x02FD020202020202L,
		0x04FB040404040404L, // 50
		0x08F7080808080808L,
		0x10EF101010101010L,
		0x20DF202020202020L,
		0x40BF404040404040L,
		0x807F808080808080L, // 55
		0xFE01010101010101L,
		0xFD02020202020202L,
		0xFB04040404040404L,
		0xF708080808080808L,
		0xEF10101010101010L, // 60
		0xDF20202020202020L,
		0xBF40404040404040L,
		0x7F80808080808080L,
	};
	
	
	/**
	 * Pre-calculated bishop attacks for each position on the entire board.
	 */
	public static final long[] BISHOP_ATTACKS = {
		0x8040201008040200L,
		0x0080402010080500L,
		0x0000804020110A00L,
		0x0000008041221400L,
		0x0000000182442800L, 
		0x0000010204885000L, // 5
		0x000102040810A000L,
		0x0102040810204080L,
		0x4020100804020002L,
		0x8040201008050005L,
		0x00804020110A000AL, // 10
		0x0000804122140014L,
		0x0000018244280028L,
		0x0001020488500050L,
		0x0102040810A000A0L,
		0x0204081020400040L, // 15
		0x2010080402000204L,
		0x4020100805000508L,
		0x804020110A000A11L,
		0x0080412214001422L,
		0x0001824428002844L, // 20
		0x0102048850005088L,
		0x02040810A000A010L,
		0x0408102040004020L,
		0x1008040200020408L,
		0x2010080500050810L, // 25
		0x4020110A000A1120L,
		0x8041221400142241L,
		0x0182442800284482L,
		0x0204885000508804L,
		0x040810A000A01008L, // 30
		0x0810204000402010L,
		0x0804020002040810L,
		0x1008050005081020L,
		0x20110A000A112040L,
		0x4122140014224180L, // 35
		0x8244280028448201L,
		0x0488500050880402L,
		0x0810A000A0100804L,
		0x1020400040201008L,
		0x0402000204081020L, // 40
		0x0805000508102040L,
		0x110A000A11204080L,
		0x2214001422418000L,
		0x4428002844820100L,
		0x8850005088040201L, // 45
		0x10A000A010080402L,
		0x2040004020100804L,
		0x0200020408102040L,
		0x0500050810204080L,
		0x0A000A1120408000L, // 50
		0x1400142241800000L,
		0x2800284482010000L,
		0x5000508804020100L,
		0xA000A01008040201L,
		0x4000402010080402L, // 55
		0x0002040810204080L,
		0x0005081020408000L,
		0x000A112040800000L,
		0x0014224180000000L,
		0x0028448201000000L, // 60
		0x0050880402010000L,
		0x00A0100804020100L,
		0x0040201008040201L
		
	};
	
	
	/**
	 * Pre-calculated queen attacks for each position on the entire board.
	 */
	public static final long[] QUEEN_ATTACKS = {
		0x81412111090503FEL,
		0x2824222120A07FDL,
		0x404844424150EFBL,
		0x8080888492A1CF7L,
		0x10101011925438EFL,
		0x2020212224A870DFL, // 5
		0x404142444850E0BFL,
		0x8182848890A0C0FFL,
		0x412111090503FE03L,
		0x824222120A07FD07L,
		0x4844424150EFB0EL, // 10
		0x80888492A1CF71CL,
		0x101011925438EF38L,
		0x20212224A870DF70L,
		0x4142444850E0BFE0L,
		0x82848890A0C07FC0L, // 15
		0x2111090503FE0305L,
		0x4222120A07FD070AL,
		0x844424150EFB0E15L,
		0x888492A1CF71C2AL,
		0x1011925438EF3854L, // 20
		0x212224A870DF70A8L,
		0x42444850E0BFE050L,
		0x848890A0C07FC0A0L,
		0x11090503FE030509L,
		0x22120A07FD070A12L, // 25
		0x4424150EFB0E1524L,
		0x88492A1CF71C2A49L,
		0x11925438EF385492L,
		0x2224A870DF70A824L,
		0x444850E0BFE05048L, // 30
		0x8890A0C07FC0A090L,
		0x90503FE03050911L,
		0x120A07FD070A1222L,
		0x24150EFB0E152444L,
		0x492A1CF71C2A4988L, // 35
		0x925438EF38549211L,
		0x24A870DF70A82422L,
		0x4850E0BFE0504844L,
		0x90A0C07FC0A09088L,
		0x503FE0305091121L, // 40
		0xA07FD070A122242L,
		0x150EFB0E15244484L,
		0x2A1CF71C2A498808L,
		0x5438EF3854921110L,
		0xA870DF70A8242221L, // 45
		0x50E0BFE050484442L,
		0xA0C07FC0A0908884L,
		0x3FE030509112141L,
		0x7FD070A12224282L,
		0xEFB0E1524448404L, // 50
		0x1CF71C2A49880808L,
		0x38EF385492111010L,
		0x70DF70A824222120L,
		0xE0BFE05048444241L,
		0xC07FC0A090888482L, // 55
		0xFE03050911214181L,
		0xFD070A1222428202L,
		0xFB0E152444840404L,
		0xF71C2A4988080808L,
		0xEF38549211101010L, // 60
		0xDF70A82422212020L,
		0xBFE0504844424140L,
		0x7FC0A09088848281L
	};
}
